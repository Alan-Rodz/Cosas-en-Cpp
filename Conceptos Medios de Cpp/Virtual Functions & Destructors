// CPP program to illustrate 
// concept of Virtual Functions 
#include <iostream> 
using namespace std; 
class base 
{ 
public: 
    virtual void print() 
    { 
        cout << "print base class" << endl; 
    } 
    void show() 
    { 
        cout << "show base class" << endl; 
    } 
}; 
class derived : public base { 
public: 
    void print() 
    { 
        cout << "print derived class" << endl; 
    } 
    void show() 
    { 
        cout << "show derived class" << endl; 
    } 
}; 
int main() 
{ 
    base* bptr; 
    derived d; 
    bptr = &d; 
    // virtual function, binded at runtime 
    bptr->print(); 
    // Non-virtual function, binded at compile time 
    bptr->show(); 
} 
--------------------------------------------------------
//Virtual Destructors
// A program with virtual destructor 
#include<iostream> 
using namespace std; 
class base 
{ 
public: 
    base()   
    { cout<<"Constructing base \n"; } 
    virtual ~base() 
    { cout<<"Destructing base \n"; }     
}; 
class derived: public base 
{ 
public: 
    derived()    
    { cout<<"Constructing derived \n"; } 
    ~derived() 
    { cout<<"Destructing derived \n"; } 
}; 
int main(void) 
{ 
derived *d = new derived(); 
base *b = d; 
delete b; 
getchar(); 
return 0; 
} 
------------------------------------------------------
//Pure virtual funcions and abstract classes 
// An abstract class 
class Test 
{ 
    // Data members of class 
public: 
    // Pure Virtual Function 
    virtual void show() = 0; 
    
/* Other members */
}; 
------------------------------------------------------
#include<iostream> 
using namespace std; 
class Base 
{ 
int x; 
public: 
    virtual void fun() = 0; 
    int getX() { return x; } 
}; 
// This class inherits from Base and implements fun() 
class Derived: public Base 
{ 
    int y; 
public: 
    void fun() { cout << "fun() called"; } 
}; 
int main(void) 
{ 
    Derived d; 
    d.fun(); 
    return 0; 
} 
